
(defun TR:test ()

  (TR:testsuite-test-for-equality 'TR:ceiling (list 0) 0)
  (TR:testsuite-test-for-equality 'TR:ceiling (list 2) 2)
  (TR:testsuite-test-for-equality 'TR:ceiling (list 0.1) 1)
  (TR:testsuite-test-for-equality 'TR:ceiling (list 3.5) 4)
  (TR:testsuite-test-for-equality 'TR:ceiling (list -2) -2)
  (TR:testsuite-test-for-equality 'TR:ceiling (list -0.1) 0)
  (TR:testsuite-test-for-equality 'TR:ceiling (list -3.5) -3)
  (TR:testsuite-test-for-equality 'TR:ceiling (list "notnumber") nil)
  (TR:testsuite-test-for-equality 'TR:ceiling (list (list 1)) nil)

  (TR:testsuite-test-for-equality 'TR:floor (list 0) 0)
  (TR:testsuite-test-for-equality 'TR:floor (list 2) 2)
  (TR:testsuite-test-for-equality 'TR:floor (list 0.1) 0)
  (TR:testsuite-test-for-equality 'TR:floor (list 3.5) 3)
  (TR:testsuite-test-for-equality 'TR:floor (list -2) -2)
  (TR:testsuite-test-for-equality 'TR:floor (list -0.1) -1)
  (TR:testsuite-test-for-equality 'TR:floor (list -3.5) -4)
  (TR:testsuite-test-for-equality 'TR:floor (list "notnumber") nil)
  (TR:testsuite-test-for-equality 'TR:floor (list (list 1)) nil)

  (TR:testsuite-test-for-equality 'TR:degrees->radians (list 180) pi)
  (TR:testsuite-test-for-equality 'TR:degrees->radians (list 360.0) (* 2 pi))
  (TR:testsuite-test-for-equality 'TR:degrees->radians (list "notnumber") nil)
  (TR:testsuite-test-for-equality 'TR:degrees->radians (list (list 180)) nil)

  (TR:testsuite-test-for-equality 'TR:radians->degrees (list pi) 180.0)
  (TR:testsuite-test-for-equality 'TR:radians->degrees (list (* 2 pi)) 360.0)
  (TR:testsuite-test-for-equality 'TR:radians->degrees (list "notnumber") nil)
  (TR:testsuite-test-for-equality 'TR:radians->degrees (list (list pi)) nil)

;TODO: have eq and equality/fuzz tests
  (TR:testsuite-test-for-equality 'TR:point->2d-point (list '(1 2 3)) '(1 2))
  (TR:testsuite-test-for-equality 'TR:point->2d-point (list '(1 2)) '(1 2))
  (TR:testsuite-test-for-equality 'TR:point->2d-point (list '(1 2 3 4)) '(1 2))
  (TR:testsuite-test-for-equality 'TR:point->2d-point (list '("notnumber" 2 3)) nil)
  (TR:testsuite-test-for-equality 'TR:point->2d-point (list '(1 "notnumber" 3)) nil)
  (TR:testsuite-test-for-equality 'TR:point->2d-point (list '(1 2 "notnumber")) '(1 2))
  (TR:testsuite-test-for-equality 'TR:point->2d-point (list nil) nil)
  (TR:testsuite-test-for-equality 'TR:point->2d-point (list 1) nil)
  (TR:testsuite-test-for-equality 'TR:point->2d-point (list '(1)) nil)
  (TR:testsuite-test-for-equality 'TR:point->2d-point (list '(nil 2 3)) nil)
  (TR:testsuite-test-for-equality 'TR:point->2d-point (list '(1 nil 3)) nil)
  (TR:testsuite-test-for-exactness 'TR:point->2d-point (list '(1.0 2 3)) '(1.0 2))
  (TR:testsuite-test-for-exactness 'TR:point->2d-point (list '(1 2.0 3)) '(1 2.0))

  (TR:testsuite-test-for-equality 'TR:2d-point->3d-point (list '(1 2)) '(1 2 0))
  (TR:testsuite-test-for-equality 'TR:2d-point->3d-point (list '(1.0 2)) '(1.0 2 0))
  (TR:testsuite-test-for-equality 'TR:2d-point->3d-point (list '("notnumber" 2)) nil)
  (TR:testsuite-test-for-equality 'TR:2d-point->3d-point (list '(1 "notnumber")) nil)
  (TR:testsuite-test-for-equality 'TR:2d-point->3d-point (list '(1 2 0)) nil)
  (TR:testsuite-test-for-equality 'TR:2d-point->3d-point (list nil) nil)
  (TR:testsuite-test-for-equality 'TR:2d-point->3d-point (list '(1)) nil)
  (TR:testsuite-test-for-equality 'TR:2d-point->3d-point (list 1) nil)
  (TR:testsuite-test-for-equality 'TR:2d-point->3d-point (list '(1 nil)) nil)
  (TR:testsuite-test-for-equality 'TR:2d-point->3d-point (list '(nil 2)) nil)
  (TR:testsuite-test-for-exactness 'TR:2d-point->3d-point (list '(1.0 2)) '(1.0 2 0))
  (TR:testsuite-test-for-exactness 'TR:2d-point->3d-point (list '(1 2.0)) '(1 2.0 0))

  (princ)
)

(princ)
